//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace projectOrange.Web.InventoryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasicItem", Namespace="http://schemas.datacontract.org/2004/07/projectOrange.Models.Inventory.DTOs")]
    [System.SerializableAttribute()]
    public partial class BasicItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullItem", Namespace="http://schemas.datacontract.org/2004/07/projectOrange.Models.Inventory.DTOs")]
    [System.SerializableAttribute()]
    public partial class FullItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="projectOrange.Services.Read.Inventory", ConfigurationName="InventoryService.Inventory")]
    public interface Inventory {
        
        [System.ServiceModel.OperationContractAttribute(Action="projectOrange.Services.Read.Inventory/Inventory/GetAllItems", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/GetAllItemsResponse")]
        projectOrange.Web.InventoryService.BasicItem[] GetAllItems(int languageId, int currencyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="projectOrange.Services.Read.Inventory/Inventory/GetAllItems", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/GetAllItemsResponse")]
        System.IAsyncResult BeginGetAllItems(int languageId, int currencyId, System.AsyncCallback callback, object asyncState);
        
        projectOrange.Web.InventoryService.BasicItem[] EndGetAllItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="projectOrange.Services.Read.Inventory/Inventory/GetItem", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/GetItemResponse")]
        projectOrange.Web.InventoryService.FullItem GetItem(int id, int languageId, int currencyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="projectOrange.Services.Read.Inventory/Inventory/GetItem", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/GetItemResponse")]
        System.IAsyncResult BeginGetItem(int id, int languageId, int currencyId, System.AsyncCallback callback, object asyncState);
        
        projectOrange.Web.InventoryService.FullItem EndGetItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="projectOrange.Services.Read.Inventory/Inventory/SearchItems", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/SearchItemsResponse")]
        projectOrange.Web.InventoryService.BasicItem[] SearchItems(int languageId, int currencyId, string text);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="projectOrange.Services.Read.Inventory/Inventory/SearchItems", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/SearchItemsResponse")]
        System.IAsyncResult BeginSearchItems(int languageId, int currencyId, string text, System.AsyncCallback callback, object asyncState);
        
        projectOrange.Web.InventoryService.BasicItem[] EndSearchItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="projectOrange.Services.Read.Inventory/Inventory/SearchItemsComplex", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/SearchItemsComplexResponse")]
        projectOrange.Web.InventoryService.BasicItem[] SearchItemsComplex(int languageId, int currencyId, string code, string text, int categoryId, int catalogId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="projectOrange.Services.Read.Inventory/Inventory/SearchItemsComplex", ReplyAction="projectOrange.Services.Read.Inventory/Inventory/SearchItemsComplexResponse")]
        System.IAsyncResult BeginSearchItemsComplex(int languageId, int currencyId, string code, string text, int categoryId, int catalogId, System.AsyncCallback callback, object asyncState);
        
        projectOrange.Web.InventoryService.BasicItem[] EndSearchItemsComplex(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface InventoryChannel : projectOrange.Web.InventoryService.Inventory, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public projectOrange.Web.InventoryService.BasicItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((projectOrange.Web.InventoryService.BasicItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public projectOrange.Web.InventoryService.FullItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((projectOrange.Web.InventoryService.FullItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public projectOrange.Web.InventoryService.BasicItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((projectOrange.Web.InventoryService.BasicItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchItemsComplexCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchItemsComplexCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public projectOrange.Web.InventoryService.BasicItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((projectOrange.Web.InventoryService.BasicItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryClient : System.ServiceModel.ClientBase<projectOrange.Web.InventoryService.Inventory>, projectOrange.Web.InventoryService.Inventory {
        
        private BeginOperationDelegate onBeginGetAllItemsDelegate;
        
        private EndOperationDelegate onEndGetAllItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetItemDelegate;
        
        private EndOperationDelegate onEndGetItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchItemsDelegate;
        
        private EndOperationDelegate onEndSearchItemsDelegate;
        
        private System.Threading.SendOrPostCallback onSearchItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchItemsComplexDelegate;
        
        private EndOperationDelegate onEndSearchItemsComplexDelegate;
        
        private System.Threading.SendOrPostCallback onSearchItemsComplexCompletedDelegate;
        
        public InventoryClient() {
        }
        
        public InventoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InventoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetAllItemsCompletedEventArgs> GetAllItemsCompleted;
        
        public event System.EventHandler<GetItemCompletedEventArgs> GetItemCompleted;
        
        public event System.EventHandler<SearchItemsCompletedEventArgs> SearchItemsCompleted;
        
        public event System.EventHandler<SearchItemsComplexCompletedEventArgs> SearchItemsComplexCompleted;
        
        public projectOrange.Web.InventoryService.BasicItem[] GetAllItems(int languageId, int currencyId) {
            return base.Channel.GetAllItems(languageId, currencyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllItems(int languageId, int currencyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllItems(languageId, currencyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public projectOrange.Web.InventoryService.BasicItem[] EndGetAllItems(System.IAsyncResult result) {
            return base.Channel.EndGetAllItems(result);
        }
        
        private System.IAsyncResult OnBeginGetAllItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int languageId = ((int)(inValues[0]));
            int currencyId = ((int)(inValues[1]));
            return this.BeginGetAllItems(languageId, currencyId, callback, asyncState);
        }
        
        private object[] OnEndGetAllItems(System.IAsyncResult result) {
            projectOrange.Web.InventoryService.BasicItem[] retVal = this.EndGetAllItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllItemsCompleted(object state) {
            if ((this.GetAllItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllItemsCompleted(this, new GetAllItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllItemsAsync(int languageId, int currencyId) {
            this.GetAllItemsAsync(languageId, currencyId, null);
        }
        
        public void GetAllItemsAsync(int languageId, int currencyId, object userState) {
            if ((this.onBeginGetAllItemsDelegate == null)) {
                this.onBeginGetAllItemsDelegate = new BeginOperationDelegate(this.OnBeginGetAllItems);
            }
            if ((this.onEndGetAllItemsDelegate == null)) {
                this.onEndGetAllItemsDelegate = new EndOperationDelegate(this.OnEndGetAllItems);
            }
            if ((this.onGetAllItemsCompletedDelegate == null)) {
                this.onGetAllItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllItemsDelegate, new object[] {
                        languageId,
                        currencyId}, this.onEndGetAllItemsDelegate, this.onGetAllItemsCompletedDelegate, userState);
        }
        
        public projectOrange.Web.InventoryService.FullItem GetItem(int id, int languageId, int currencyId) {
            return base.Channel.GetItem(id, languageId, currencyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetItem(int id, int languageId, int currencyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItem(id, languageId, currencyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public projectOrange.Web.InventoryService.FullItem EndGetItem(System.IAsyncResult result) {
            return base.Channel.EndGetItem(result);
        }
        
        private System.IAsyncResult OnBeginGetItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            int languageId = ((int)(inValues[1]));
            int currencyId = ((int)(inValues[2]));
            return this.BeginGetItem(id, languageId, currencyId, callback, asyncState);
        }
        
        private object[] OnEndGetItem(System.IAsyncResult result) {
            projectOrange.Web.InventoryService.FullItem retVal = this.EndGetItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemCompleted(object state) {
            if ((this.GetItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemCompleted(this, new GetItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemAsync(int id, int languageId, int currencyId) {
            this.GetItemAsync(id, languageId, currencyId, null);
        }
        
        public void GetItemAsync(int id, int languageId, int currencyId, object userState) {
            if ((this.onBeginGetItemDelegate == null)) {
                this.onBeginGetItemDelegate = new BeginOperationDelegate(this.OnBeginGetItem);
            }
            if ((this.onEndGetItemDelegate == null)) {
                this.onEndGetItemDelegate = new EndOperationDelegate(this.OnEndGetItem);
            }
            if ((this.onGetItemCompletedDelegate == null)) {
                this.onGetItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemDelegate, new object[] {
                        id,
                        languageId,
                        currencyId}, this.onEndGetItemDelegate, this.onGetItemCompletedDelegate, userState);
        }
        
        public projectOrange.Web.InventoryService.BasicItem[] SearchItems(int languageId, int currencyId, string text) {
            return base.Channel.SearchItems(languageId, currencyId, text);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchItems(int languageId, int currencyId, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchItems(languageId, currencyId, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public projectOrange.Web.InventoryService.BasicItem[] EndSearchItems(System.IAsyncResult result) {
            return base.Channel.EndSearchItems(result);
        }
        
        private System.IAsyncResult OnBeginSearchItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int languageId = ((int)(inValues[0]));
            int currencyId = ((int)(inValues[1]));
            string text = ((string)(inValues[2]));
            return this.BeginSearchItems(languageId, currencyId, text, callback, asyncState);
        }
        
        private object[] OnEndSearchItems(System.IAsyncResult result) {
            projectOrange.Web.InventoryService.BasicItem[] retVal = this.EndSearchItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchItemsCompleted(object state) {
            if ((this.SearchItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchItemsCompleted(this, new SearchItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchItemsAsync(int languageId, int currencyId, string text) {
            this.SearchItemsAsync(languageId, currencyId, text, null);
        }
        
        public void SearchItemsAsync(int languageId, int currencyId, string text, object userState) {
            if ((this.onBeginSearchItemsDelegate == null)) {
                this.onBeginSearchItemsDelegate = new BeginOperationDelegate(this.OnBeginSearchItems);
            }
            if ((this.onEndSearchItemsDelegate == null)) {
                this.onEndSearchItemsDelegate = new EndOperationDelegate(this.OnEndSearchItems);
            }
            if ((this.onSearchItemsCompletedDelegate == null)) {
                this.onSearchItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchItemsCompleted);
            }
            base.InvokeAsync(this.onBeginSearchItemsDelegate, new object[] {
                        languageId,
                        currencyId,
                        text}, this.onEndSearchItemsDelegate, this.onSearchItemsCompletedDelegate, userState);
        }
        
        public projectOrange.Web.InventoryService.BasicItem[] SearchItemsComplex(int languageId, int currencyId, string code, string text, int categoryId, int catalogId) {
            return base.Channel.SearchItemsComplex(languageId, currencyId, code, text, categoryId, catalogId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchItemsComplex(int languageId, int currencyId, string code, string text, int categoryId, int catalogId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchItemsComplex(languageId, currencyId, code, text, categoryId, catalogId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public projectOrange.Web.InventoryService.BasicItem[] EndSearchItemsComplex(System.IAsyncResult result) {
            return base.Channel.EndSearchItemsComplex(result);
        }
        
        private System.IAsyncResult OnBeginSearchItemsComplex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int languageId = ((int)(inValues[0]));
            int currencyId = ((int)(inValues[1]));
            string code = ((string)(inValues[2]));
            string text = ((string)(inValues[3]));
            int categoryId = ((int)(inValues[4]));
            int catalogId = ((int)(inValues[5]));
            return this.BeginSearchItemsComplex(languageId, currencyId, code, text, categoryId, catalogId, callback, asyncState);
        }
        
        private object[] OnEndSearchItemsComplex(System.IAsyncResult result) {
            projectOrange.Web.InventoryService.BasicItem[] retVal = this.EndSearchItemsComplex(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchItemsComplexCompleted(object state) {
            if ((this.SearchItemsComplexCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchItemsComplexCompleted(this, new SearchItemsComplexCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchItemsComplexAsync(int languageId, int currencyId, string code, string text, int categoryId, int catalogId) {
            this.SearchItemsComplexAsync(languageId, currencyId, code, text, categoryId, catalogId, null);
        }
        
        public void SearchItemsComplexAsync(int languageId, int currencyId, string code, string text, int categoryId, int catalogId, object userState) {
            if ((this.onBeginSearchItemsComplexDelegate == null)) {
                this.onBeginSearchItemsComplexDelegate = new BeginOperationDelegate(this.OnBeginSearchItemsComplex);
            }
            if ((this.onEndSearchItemsComplexDelegate == null)) {
                this.onEndSearchItemsComplexDelegate = new EndOperationDelegate(this.OnEndSearchItemsComplex);
            }
            if ((this.onSearchItemsComplexCompletedDelegate == null)) {
                this.onSearchItemsComplexCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchItemsComplexCompleted);
            }
            base.InvokeAsync(this.onBeginSearchItemsComplexDelegate, new object[] {
                        languageId,
                        currencyId,
                        code,
                        text,
                        categoryId,
                        catalogId}, this.onEndSearchItemsComplexDelegate, this.onSearchItemsComplexCompletedDelegate, userState);
        }
    }
}
